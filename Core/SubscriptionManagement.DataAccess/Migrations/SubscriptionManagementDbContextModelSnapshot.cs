// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubscriptionManagement.DataAccess;

namespace SubscriptionManagement.DataAccess.Migrations
{
    [DbContext(typeof(SubscriptionManagementDbContext))]
    partial class SubscriptionManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ResellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ResellerId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("484c2b84-2644-4b55-8f64-27d643286b7a"),
                            BookName = "To Kill a Mockingbird",
                            CatalogId = new Guid("ac06b5ad-af65-435c-bb49-4adb5668fd67"),
                            CreatedAt = new DateTime(2020, 9, 7, 19, 49, 33, 208, DateTimeKind.Utc).AddTicks(8534),
                            ModifiedAt = new DateTime(2020, 9, 7, 19, 49, 33, 208, DateTimeKind.Utc).AddTicks(8545),
                            Price = 25m
                        },
                        new
                        {
                            Id = new Guid("ca55d80e-5625-4258-94b6-a79278432a5b"),
                            BookName = "The Boy, the Mole, the Fox and the Horse",
                            CatalogId = new Guid("ac06b5ad-af65-435c-bb49-4adb5668fd67"),
                            CreatedAt = new DateTime(2020, 9, 7, 19, 49, 33, 209, DateTimeKind.Utc).AddTicks(2202),
                            ModifiedAt = new DateTime(2020, 9, 7, 19, 49, 33, 209, DateTimeKind.Utc).AddTicks(2216),
                            Price = 30m
                        },
                        new
                        {
                            Id = new Guid("43f37e69-e2f0-44eb-a224-9917d8ab3441"),
                            BookName = "Brazen and the Beast",
                            CatalogId = new Guid("35ad6824-3027-4721-8c8d-9048a5bd6ebd"),
                            CreatedAt = new DateTime(2020, 9, 7, 19, 49, 33, 209, DateTimeKind.Utc).AddTicks(2334),
                            ModifiedAt = new DateTime(2020, 9, 7, 19, 49, 33, 209, DateTimeKind.Utc).AddTicks(2343),
                            Price = 40m
                        });
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CatalogName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac06b5ad-af65-435c-bb49-4adb5668fd67"),
                            CatalogName = "Classics",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("35ad6824-3027-4721-8c8d-9048a5bd6ebd"),
                            CatalogName = "Romance",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.Reseller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResellerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resellers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ef291a7-5f8d-4bc7-bd00-34bb438e43a6"),
                            CreatedAt = new DateTime(2020, 9, 7, 19, 49, 33, 210, DateTimeKind.Utc).AddTicks(3247),
                            ModifiedAt = new DateTime(2020, 9, 7, 19, 49, 33, 210, DateTimeKind.Utc).AddTicks(3256),
                            ResellerName = "System"
                        },
                        new
                        {
                            Id = new Guid("17948b03-bdcc-436b-8006-78022fe3008a"),
                            CreatedAt = new DateTime(2020, 9, 7, 19, 49, 33, 210, DateTimeKind.Utc).AddTicks(4026),
                            ModifiedAt = new DateTime(2020, 9, 7, 19, 49, 33, 210, DateTimeKind.Utc).AddTicks(4032),
                            ResellerName = "Amazon"
                        });
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("264badb0-913a-4a83-9193-276e12e48486"),
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionName = "Standart"
                        },
                        new
                        {
                            Id = new Guid("d1c05ba7-cc98-4842-83f3-9d160a970ab4"),
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionName = "Silver"
                        },
                        new
                        {
                            Id = new Guid("5fd8c947-ef44-4bec-a38d-72fef313394a"),
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscriptionName = "Gold"
                        });
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReseller")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7ec27ee-ac75-47f3-b4b9-9e76bcdc9c39"),
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "javid@mail.com",
                            IsReseller = false,
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "mFdxtcYpmVV5T/cXNFV+M7uNlRQ=",
                            SubscriptionId = new Guid("264badb0-913a-4a83-9193-276e12e48486"),
                            UserRole = 0
                        },
                        new
                        {
                            Id = new Guid("685b4197-c2f4-4d75-a241-b8dc204e59bc"),
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@mail.com",
                            IsReseller = false,
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "mFdxtcYpmVV5T/cXNFV+M7uNlRQ=",
                            SubscriptionId = new Guid("d1c05ba7-cc98-4842-83f3-9d160a970ab4"),
                            UserRole = 0
                        },
                        new
                        {
                            Id = new Guid("ebf0c1b9-3210-41c4-9765-fa2b805ca0f4"),
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "amanda@mail.com",
                            IsReseller = false,
                            ModifiedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "mFdxtcYpmVV5T/cXNFV+M7uNlRQ=",
                            SubscriptionId = new Guid("d1c05ba7-cc98-4842-83f3-9d160a970ab4"),
                            UserRole = 1
                        });
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.UserBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("OnSale")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bec1764-d0d7-42aa-b0d1-cb2beaa309de"),
                            BookId = new Guid("484c2b84-2644-4b55-8f64-27d643286b7a"),
                            OnSale = false,
                            SubscriptionId = new Guid("264badb0-913a-4a83-9193-276e12e48486"),
                            UserId = new Guid("a7ec27ee-ac75-47f3-b4b9-9e76bcdc9c39")
                        });
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.Book", b =>
                {
                    b.HasOne("SubscriptionManagement.Domains.Entities.Catalog", "Catalog")
                        .WithMany("Books")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubscriptionManagement.Domains.Entities.Reseller", null)
                        .WithMany("Books")
                        .HasForeignKey("ResellerId");
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.User", b =>
                {
                    b.HasOne("SubscriptionManagement.Domains.Entities.Subscription", "Subscription")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SubscriptionManagement.Domains.Entities.UserBook", b =>
                {
                    b.HasOne("SubscriptionManagement.Domains.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubscriptionManagement.Domains.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("SubscriptionManagement.Domains.Entities.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
